from collections import defaultdict

iddescr = "The hex value of a UUID"

param = 'As described in \\S \\ref{method:setup}'

descriptions = defaultdict(str, {
'instid': iddescr + ' for an NFCTP graph instance.',
'id': 'A uniquely identifying value.',
'arcid': iddescr + ' for an arc.',
'caps': 'Capacity RHS values.',
'cap_dirs': 'Whether a constraint is greater or less-than',
'paramid': iddescr + ' for a point in parameter space.',
'species': 'A description of a problem species.',
'n_arcs': 'The number of arcs in an NFCTP instance.',
'n_u_grps': 'The number of supply groups in an NFCTP instance.',
'n_v_grps': 'The number of demand groups in an NFCTP instance.',
'n_u_nodes': 'The number of supply nodes in an NFCTP instance.',
'n_v_nodes': 'The number of demand nodes in an NFCTP instance.',
'n_constrs': 'The number of constraints in an NFCTP instance.',
'excl_frac': 'The fraction of arcs in a NFCTP graph that are exclusive.',
'solnid': iddescr + ' for a solution to an ExchangeGraph instance.',
'cyclus_version': 'The version of Cyclus used to generate a solution.',
'gid': 'A unique value identifying an ExchangeGroup',
'kind': 'Whether an object is associated with supply or demand.',
'qty': 'A quantity.',
'excl': 'Whether or not an arc is exclusive.',
'excl_id': 'A unique value identifying the mutually exclusive group an arc belongs to.',
'solver': 'A description of the solver used.',
'problem': 'A description of the problem family.',
'time': 'How long a solution took.',
'objective': 'The objective value associated with a solution.',
'cyclopts_version': 'The version of Cyclopts used to generate a solution.',
'timestamp': 'A timestamp of when a solution was ran.',
'pref_flow': 'The value of the product of preference and flow for arcs.',
'c_pref_flow': 'The value of the product of commodity-based preference and flow for arcs.',
'l_pref_flow': 'The value of the product of location-based preference and flow for arcs.',
'family': 'A description of the problem family',
'n_r_th': param,
'n_r_f_mox': param,
'n_r_f_thox': param,
'n_s_uox': param,
'n_s_th_mox': param,
'n_s_f_mox': param,
'n_s_f_thox': param,
'n_s_repo': param,
'd_f_mox': param,
'd_f_thox': param,
'd_th': param,
'f_fc': param,
'f_loc': param,
'f_mox': param,
'f_rxtr': param,
'n_reg': param,
'n_rxtr': param,
'r_inv_proc': param,
'r_l_c': param,
'r_repo': param,
'r_s_mox': param,
'r_s_mox_uox': param,
'r_s_th': param,
'r_s_thox': param,
'r_t_f': param,
'r_th_pu': param,
'seed': 'The random seed used to generate an instance.',
'uid': 'Supply node for an arc.',
'ucaps': 'Capacity coefficients for a supply node.',
'vid': 'Request node for an arc.',
'vcaps': 'Capacity coefficients for a request node.',
'pref': 'Preference value of an arc.',
'pref_l': 'Location-based preference of an arc.',
'pref_c': 'Commodity-based preference of an arc.',
'commod': 'The commodity associated with an arc.',
})

